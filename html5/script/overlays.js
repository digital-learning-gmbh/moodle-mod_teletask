// Generated by CoffeeScript 1.4.0
(function() {

  define(function() {
    var Overlay, Overlays;
    Overlay = (function() {

      function Overlay($DOMelement) {
        this.DOMelement = $DOMelement;
        this.time_start = $DOMelement.data('start');
        this.time_end = $DOMelement.data('end');
      }

      Overlay.prototype.isEnabledAtTime = function(time) {
        return this.time_start <= time && time < this.time_end;
      };

      Overlay.prototype.setEnabled = function(time) {
        if (this.isEnabledAtTime(time)) {
          return this.DOMelement.addClass("enabled");
        } else {
          return this.DOMelement.removeClass("enabled");
        }
      };

      return Overlay;

    })();
    return Overlays = (function() {

      function Overlays(player, container) {
        this.$container = container;
        this.overlays = [];
        this.parseOverlays();
        this.oldtime = -1;
        this.attachOverlayHandlers(player);
      }

      Overlays.prototype.attachOverlayHandlers = function(player) {
        var _this = this;
        player.$videoA.on("timeupdate", function() {
          return _this.setActiveOverlay(player.videoA.currentTime);
        });
        return this.$container.find("a").on("click", function() {
          return player.pause();
        });
      };

      Overlays.prototype.parseOverlays = function() {
        /*
                parse overlay information from DOM
        */

        var DOMoverlay, overlay, _i, _len, _ref, _results;
        _ref = this.$container.find('.overlay');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          DOMoverlay = _ref[_i];
          overlay = new Overlay($$(DOMoverlay));
          _results.push(this.overlays.push(overlay));
        }
        return _results;
      };

      Overlays.prototype.setActiveOverlay = function(time) {
        var overlay, _i, _len, _ref, _results;
        _ref = this.overlays;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          overlay = _ref[_i];
          if (overlay.isEnabledAtTime(this.oldtime) !== overlay.isEnabledAtTime(time)) {
            this.refreshOverlay(time);
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      Overlays.prototype.refreshOverlay = function(time) {
        var overlay, _i, _len, _ref, _results;
        this.oldtime = time;
        _ref = this.overlays;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          overlay = _ref[_i];
          _results.push(overlay.setEnabled(time));
        }
        return _results;
      };

      return Overlays;

    })();
  });

}).call(this);
